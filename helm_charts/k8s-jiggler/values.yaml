replicaCount: 1

image:
  repository: ghcr.io/neilrw86/k8s-jiggler
  pullPolicy: IfNotPresent
  # tag is derived from Chart.appVersion by default if left empty
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80 # External port for the service
  targetPort: 80 # Port on the pod k8s-jiggler listens on

ingress:
  enabled: true
  className: "nginx" # Your Ingress controller class
  annotations:
    # Nginx Ingress specific annotations
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # Cert-manager annotations for SSL
    cert-manager.io/cluster-issuer: "letsencrypt-prod-cfdns" # Your cert-manager ClusterIssuer
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: "jiggler.neilwylie.com" # Your desired hostname
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: jiggler-tls # TLS secret for jiggler.neilwylie.com
      hosts:
        - "jiggler.neilwylie.com"

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}
tolerations: []
affinity: {}

# k8s-jiggler specific configuration
jiggler:
  # Namespace to watch for pods. If empty or not set, k8s-jiggler watches all namespaces (requires rbac.clusterScoped=true).
  # If set and rbac.clusterScoped=false, k8s-jiggler will watch this specific namespace.
  namespace: ""
  # Interval to check for pods. (e.g., "30s", "1m", "2h")
  interval: "60s"
  # Label selector to find pods to jiggle.
  labelSelector: "jiggler/jiggle"
  # If true, k8s-jiggler will attempt to patch processed pods with an annotation "jiggler/status: jiggled".
  # This requires 'patch' permission on pods (included in RBAC if this is true).
  markProcessed: false

rbac:
  # Specifies whether RBAC resources (ServiceAccount, Role/ClusterRole, RoleBinding/ClusterRoleBinding) should be created
  create: true
  # If true, creates ClusterRole and ClusterRoleBinding for cluster-wide permissions.
  # If false, creates Role and RoleBinding (scoped to jiggler.namespace or the Helm release namespace).
  # For k8s-jiggler to watch all namespaces (when jiggler.namespace=""), this must be true.
  clusterScoped: true
