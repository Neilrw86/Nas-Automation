# This values.yaml is for your 'jellyfin-wrapper' chart.
# The keys here will be passed to the 'jellyfin/jellyfin' chart (from https://jellyfin.github.io/jellyfin-helm/).
# All values for the dependency chart must be nested under the 'jellyfin:' key.
# You can find all available options for the 'jellyfin/jellyfin' chart by running:
# helm show values jellyfin/jellyfin --repo https://jellyfin.github.io/jellyfin-helm/ --version 2.3.0

jellyfin:
  # -- Controller and Pod configuration
  image:
    repository: jellyfin/jellyfin # Official image
    tag: "10.10.6" # Align with the appVersion of the chart (2.3.0 -> 10.10.6). You can pin to an older version if needed.
    pullPolicy: IfNotPresent

  # -- Configuration for Jellyfin (maps to environment variables)
  config:
    TZ: "Europe/London" # Set your timezone
    PUID: "1003"        # Match your user ID that owns media files on the NAS
    PGID: "1003"        # Match your group ID that owns media files on the NAS
    # publishedServerUrl: "jellyfin.yourdomain.com" # Optional: URL for external access, e.g., if behind a reverse proxy.

  # -- Service configuration
  service:
    type: ClusterIP # Or LoadBalancer if you want direct external access without Ingress (less common for this setup)
    port: 8096 # HTTP port for Jellyfin

  # -- Ingress configuration
  ingress:
    enabled: true
    className: "nginx" # Or your specific Ingress controller class name
    annotations:
      # Common annotations for Nginx Ingress
      nginx.ingress.kubernetes.io/proxy-body-size: "0" # Allow large file streaming
      nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
      # If using cert-manager for SSL (recommended)
      cert-manager.io/cluster-issuer: "letsencrypt-prod-cfdns" # Your cert-manager ClusterIssuer
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    hosts:
      - host: "jellyfin.neilwylie.com" # !!! VERIFY this is your desired domain !!!
        paths:
          - path: /
            pathType: Prefix # Or ImplementationSpecific
    tls: # cert-manager will automatically create and manage the secret if cluster-issuer is configured
      - secretName: jellyfin-tls # cert-manager will use this to store the certificate
        hosts:
          - "jellyfin.neilwylie.com" # Must match the host above

  # -- Persistence for Jellyfin
  persistence:
    config:
      enabled: true
      existingClaim: "nfs-configs-pvc" # Using your existing PVC for Jellyfin config
      mountPath: /config # Default is /config
      # subPath: "" # Optional: if using a subpath within the PVC

    transcodes: # This is for the transcoding cache (previously your 'cache' volume)
      enabled: true
      # existingClaim: "jellyfin-cache-pvc" # If you have an existing PVC for cache
      accessModes:
        - ReadWriteOnce # Note: this is a list now
      size: "10Gi" # For transcoding cache, adjust based on usage
      mountPath: /cache # Jellyfin default is /transcodes, but you specified /cache

  # -- Mount your media libraries using extraVolumes and extraVolumeMounts
  # These allow you to define additional volumes and their mount points in the Jellyfin container.
  extraVolumeMounts:
    - name: media-films # A descriptive name for the volume mount
      mountPath: /media/films # Path inside Jellyfin container where films will be
    - name: media-tv # A descriptive name for the volume mount
      mountPath: /media/tvshows # Path inside Jellyfin container where TV shows will be

  extraVolumes:
    - name: media-films # Must match a name in extraVolumeMounts
      persistentVolumeClaim:
        claimName: "nfs-films-pvc" # Using your existing PVC for films
    - name: media-tv # Must match a name in extraVolumeMounts
      persistentVolumeClaim:
        claimName: "nfs-tv-pvc" # Using your existing PVC for TV shows

  # -- Optional: Hardware Acceleration (requires node setup and device plugins)
  # The jellyfin/jellyfin chart has its own way to configure this, e.g. jellyfin.config.EnableHardwareEncoding
  # and potentially specific device plugin configurations if needed. Refer to its values.

  # -- Resource requests and limits (adjust as needed)
  # resources:
  #   limits:
  #     cpu: "2"
  #     memory: "2Gi"
  #   requests:
  #     cpu: "500m"
  #     memory: "1Gi"