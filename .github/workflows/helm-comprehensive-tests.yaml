name: Helm Chart Comprehensive Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  helm-tests:
    runs-on: ubuntu-latest
    env:
      HELM_CHARTS_DIR: ./helm_charts # Define the charts directory as an environment variable

    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Install kubeval
        run: |
          KUBEVAL_VERSION="0.16.1" # Check for latest: https://github.com/instrumenta/kubeval/releases
          wget "https://github.com/instrumenta/kubeval/releases/download/v${KUBEVAL_VERSION}/kubeval-linux-amd64.tar.gz"
          tar xf kubeval-linux-amd64.tar.gz
          sudo mv kubeval /usr/local/bin
          rm kubeval-linux-amd64.tar.gz
          kubeval --version
        shell: bash

      - name: Install helm-unittest plugin
        run: |
          # Check for latest: https://github.com/quintush/helm-unittest/releases
          helm plugin install https://github.com/quintush/helm-unittest --version 0.4.1
          helm plugin list
        shell: bash

      - name: Install Conftest
        run: |
          CONFTEST_VERSION="0.52.0" # Check for latest: https://github.com/open-policy-agent/conftest/releases
          wget "https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST_VERSION}/conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz"
          tar xzf "conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz"
          sudo mv conftest /usr/local/bin
          rm "conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz"
          conftest --version
        shell: bash

      - name: Install KubeLinter
        run: |
          KUBELINTER_VERSION="0.6.6" # Check for latest: https://github.com/stackrox/kube-linter/releases
          wget "https://github.com/stackrox/kube-linter/releases/download/v${KUBELINTER_VERSION}/kube-linter-linux.tar.gz"
          tar -xzf kube-linter-linux.tar.gz
          sudo mv kube-linter /usr/local/bin/
          rm kube-linter-linux.tar.gz
          kube-linter version
        shell: bash

      - name: Install Trivy CLI
        uses: aquasecurity/trivy-action@master

      - name: Install helm-trivy plugin
        run: |
          export GIT_TERMINAL_PROMPT=0
          helm plugin install https://github.com/aquasecurity/helm-trivy
          helm plugin list # Verify plugin installation
        shell: bash

      - name: Create Kubernetes cluster (kind)
        uses: helm/kind-action@v1.10.0

      # --- Chart Testing Steps ---
      - name: Prepare chart list
        id: list_charts
        run: |
          CHART_DIRECTORIES=$(find ${{ env.HELM_CHARTS_DIR }} -mindepth 1 -maxdepth 1 -type d -print)
          if [ -z "$CHART_DIRECTORIES" ]; then
            echo "No chart directories found under ${{ env.HELM_CHARTS_DIR }}."
            echo "charts_found=false" >> $GITHUB_OUTPUT
          else
            echo "Found charts:"
            echo "$CHART_DIRECTORIES"
            echo "charts_found=true" >> $GITHUB_OUTPUT
            # For matrix strategy if desired later, or just for the loop below
            # echo "charts=$(echo "$CHART_DIRECTORIES" | jq -R . | jq -cs .)" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Lint Helm charts (helm lint)
        if: steps.list_charts.outputs.charts_found == 'true'
        run: |
          find ${{ env.HELM_CHARTS_DIR }} -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d \0' chart_dir; do
            echo "--- Linting chart: $chart_dir ---"
            helm lint "$chart_dir"
          done
        shell: bash

      - name: Scan Helm charts for CVEs (helm-trivy)
        if: steps.list_charts.outputs.charts_found == 'true'
        run: |
          find ${{ env.HELM_CHARTS_DIR }} -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d \0' chart_dir; do
            echo "--- Scanning chart with helm-trivy: $chart_dir ---"
            helm trivy "$chart_dir" \
              --exit-code 0 \
              --format table \
              --ignore-unfixed \
              --vuln-type os,library \
              --severity CRITICAL,HIGH
          done
        shell: bash

      - name: Validate Helm templates (kubeval)
        if: steps.list_charts.outputs.charts_found == 'true'
        run: |
          find ${{ env.HELM_CHARTS_DIR }} -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d \0' chart_dir; do
            echo "--- Validating template with kubeval: $chart_dir ---"
            # You might need to specify --kubernetes-version if your CRDs are not found
            # or if you target a specific K8s version.
            helm template "$chart_dir" | kubeval --ignore-missing-schemas --strict
          done
        shell: bash

      - name: Run Helm chart unit tests (helm-unittest)
        if: steps.list_charts.outputs.charts_found == 'true'
        run: |
          find ${{ env.HELM_CHARTS_DIR }} -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d \0' chart_dir; do
            # Check if unit test files exist for the chart
            if [ -d "${chart_dir}/tests/unit" ] || find "${chart_dir}" -name '*_test.yaml' -print -quit | grep -q .; then
              echo "--- Running unit tests for chart: $chart_dir ---"
              helm unittest "$chart_dir"
            else
              echo "--- No unit tests found for chart: $chart_dir ---"
            fi
          done
        shell: bash

      - name: Test Helm templates against policies (Conftest)
        if: steps.list_charts.outputs.charts_found == 'true'
        run: |
          # Define the directory where your Conftest policies are stored
          # This could be at the root of your repo, or per-chart.
          # For this example, assuming a single policy directory at the root.
          POLICY_DIR="./policy" # Adjust this path to your Conftest policy directory

          if [ ! -d "$POLICY_DIR" ]; then
            echo "Policy directory $POLICY_DIR not found. Skipping Conftest tests."
            exit 0 # Or use 'continue' if this step is not critical
          fi

          find ${{ env.HELM_CHARTS_DIR }} -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d \0' chart_dir; do
            echo "--- Testing chart $chart_dir against policies in $POLICY_DIR ---"
            # The '-' tells conftest to read from stdin
            helm template "$chart_dir" | conftest test -p "$POLICY_DIR" -
          done
        shell: bash

      - name: Lint Helm templates for best practices (KubeLinter)
        if: steps.list_charts.outputs.charts_found == 'true'
        run: |
          find ${{ env.HELM_CHARTS_DIR }} -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d \0' chart_dir; do
            echo "--- Linting chart $chart_dir with KubeLinter ---"
            # The '-' tells kube-linter to read from stdin
            # Add --config path/to/kubelinter-config.yaml if you have a custom config
            helm template "$chart_dir" | kube-linter lint -
          done
        shell: bash

      - name: Scan filesystem for vulnerabilities
        run: |
          trivy fs . \
            --exit-code 0 \
            --format table \
            --ignore-unfixed \
            --vuln-type os,library \
            --severity CRITICAL,HIGH
        shell: bash

      - name: Scan for misconfigurations
        run: |
          trivy config . \
            --exit-code 0 \
            --format table \
            --severity CRITICAL,HIGH
        shell: bash

      - name: Deploy chart and run Helm tests (requires K8s cluster)
        if: steps.list_charts.outputs.charts_found == 'true'
        run: |
          find ${{ env.HELM_CHARTS_DIR }} -mindepth 1 -maxdepth 1 -type d -print0 | while IFS= read -r -d \0' chart_dir; do
            echo "--- Deploying and testing chart: $chart_dir ---"
            RELEASE_NAME="test-$(basename "$chart_dir")"
            NAMESPACE="helm-test-$(basename "$chart_dir")"

            if [ -d "$chart_dir" ]; then
              kubectl create namespace "$NAMESPACE" || echo "Namespace $NAMESPACE might already exist"
              helm install "$RELEASE_NAME" "$chart_dir" -n "$NAMESPACE" --wait --timeout 5m
              helm test "$RELEASE_NAME" -n "$NAMESPACE" --timeout 3m
              helm uninstall "$RELEASE_NAME" -n "$NAMESPACE"
              kubectl delete namespace "$NAMESPACE" --wait=false
            else
              echo "Chart $chart_dir not found for integration testing."
            fi
          done
        shell: bash